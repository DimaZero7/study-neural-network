# https://www.youtube.com/watch?v=VqChpNNYZ8Q&list=PLA0M1Bcd0w8yv0XGiF1wjerjSZVSrYbjh&index=2

import numpy as np


# Код использует динамическую типизацию, где False = 0, а True = 1
# При математических операциях int и bool последний преобразуется в первый тип


def act(x: float) -> bool:
    """
    Функция активации: если сумма весов для нейрона равна или больше, чем
        0.5, то функция вернет True, что означает, что нейрон активировался,
        иначе вернет False, что означает, что нейрон не активировался
    """
    if x >= 0.5:
        return True
    else:
        return False


def go(house: bool, rock: bool, attr: bool) -> bool:
    """
    house - девушке нравится, когда у парня есть дом
    rock - девушке не нравится, если парню нравится рок
    attr - девушке принципиально важно, чтобы парень был красивым

    Если у парня есть дом, то надо передать 1, если нет - то 0, аналогично для
        других аргументов
    """
    # Вектор входного сигнала (пример: [1, 0, 1])
    # Это то, что нейроны получают на вход
    # ________________________________________________________________________
    x = np.array([house, rock, attr])

    # Вектора весов
    # Это важность того или иного сигнала для каждого нейрона в отдельности
    # К примеру, один нейрон оценивает важность красоты как принципиальную, а другому на это всё равно
    # _________________________________________________________________________
    # Вектор весов 1-го нейрона.
    # Он активируется, если парню нравится дом и он слушает рок
    # Это значит, что парень будет слушать рок дома, но при этом девушке не нравится рок
    # Поэтому этот нейрон при активации несет в себе отрицательную оценку парня
    w11 = [0.3, 0.3, 0.0]

    # Вектор весов 2-го нейрона
    # Он активируется, если парень красивый, но другие факторы не имеют значения
    # Если нейрон активировался, он несет в себе положительную оценку парня, потому что девушке нравится красивый парень
    w12 = [0.4, -0.5, 1]

    # Объединяем веса в одну матрицу 2x3
    # Это значит, что у нас 2 нейрона, у которых по 3 входа
    weight1 = np.array([w11, w12])

    # Формирующий вектор связи для выходного нейрона, матрица 2x1
    # Это значит, что у нас 2 нейрона с 1 выходным сигналом
    # В нашем случаее, если активировался 1-й нейрон, то это негативная оценка парня
    # А если активировался 2-ой, то это положительная оценка парня
    weight2 = np.array([-1, 1])

    # Перемножение матриц весов нейронов и входного сигнала
    # На выходе получим сумму выходных сигналов для каждого нейрона
    sum_hidden = np.dot(weight1, x)
    print("Сумма выходных сигналов для каждого нейрона: ", sum_hidden)

    # Пропуск суммы входных значений каждого нейрона через функцию активации
    # Чтобы понять, активировался ли нейрон или нет
    out_hidden = np.array([act(x) for x in sum_hidden])
    print("Вектор со значениями активации для каждого нейрона: ", out_hidden)

    # Перемножение матриц со значениями активации нейронов и контекстом активации
    # Например, определенный нейрон может нести при активации как положительную оценку парня, так и отрицательную
    # На выходе получаем выходной сигнал для каждого нейрона
    sum_end = np.dot(weight2, out_hidden)

    # Суммируем все значения всех нейронов, чтобы вынести вердикт - прошел ли парень оценку или нет
    y = act(sum_end)
    print("Выходное значение: ", y)

    return y


house = True
rock = False
attr = False

res = go(house=house, rock=rock, attr=attr)
if res == 1:
    print("Парень прошел отбор")
else:
    print("Парень не прошел отбор")
